"{\"ip_address\":null,\"time\":\"2023-05-06T17:24:57.370Z\",\"kernel_id\":\"fc5ae4ca-feb4-4cd8-a7e4-f191409970e1\",\"notebook_name\":\"task1.ipynb\",\"event\":\"save_notebook\",\"cell_source\":\"[\n  {\n    \\"id\\": \\"0777191b09c64a1eb8f7184de5bea5fd\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Imports / installations\\"\n  },\n  {\n    \\"id\\": \\"b3040e7f00bc48ce8910bea1b77b4767\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Do not forget to check if your notebook log collection plugin is working\\nfrom mining_extension import check_logging\\ncheck_logging(\\\\"http://3.249.245.244:9999\\\\")\\",\n    \\"execution_count\\": 1\n  },\n  {\n    \\"id\\": \\"1f928245665445ac9b17ba3a3e2c5c52\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install pandas\\",\n    \\"execution_count\\": 2\n  },\n  {\n    \\"id\\": \\"0f30e81592ed4cfea6d4e0049e937577\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install numpy\\",\n    \\"execution_count\\": 3\n  },\n  {\n    \\"id\\": \\"74ef647fde71423680a439846440ba7d\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install seaborn\\",\n    \\"execution_count\\": 4\n  },\n  {\n    \\"id\\": \\"8e64d7161f05487eb8f7202a359be706\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install scipy\\",\n    \\"execution_count\\": 5\n  },\n  {\n    \\"id\\": \\"1f8250d075dc47feaab6882790afa562\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"import numpy as np\\nimport matplotlib.pyplot as plt\\nimport scipy.stats as stats\\nimport pandas as pd\\nimport seaborn as sns\\nimport zipfile\\",\n    \\"execution_count\\": 6\n  },\n  {\n    \\"id\\": \\"a757d673923341f48fafe357e50e10f1\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Data Engineering\\"\n  },\n  {\n    \\"id\\": \\"76f543be8c9a4b0b8137ae511016a857\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Reading the data from a text file and saving to Pandas DataFrame\\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip") as myzip:\\n    with myzip.open("jetnet_logs.txt") as myfile:\\n        df = pd.read_csv(myfile, delimiter="\\\\t", header=None)\\",\n    \\"execution_count\\": 7\n  },\n  {\n    \\"id\\": \\"14c4dd636865455a8a17d673605965ed\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Looking at the raw data\\ndf.head()\\",\n    \\"execution_count\\": 8\n  },\n  {\n    \\"id\\": \\"5c071c9e143348dfb7a2b5e18b1f72ca\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# For each instance separate the user and their list of actions\\ndf["user_id"] = df[0].str.split(":").str[0]\\ndf["info"] = df[0].str.split(": ").str[1]\\ndf["user_id"] = df["user_id"].str.replace("@", "")\\ndf = df.drop(0, axis=1)\\",\n    \\"execution_count\\": 9\n  },\n  {\n    \\"id\\": \\"cddebfd846bc448ebcc8e60a1dcf45c6\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Making list of actions with corresponding user info\\ndf = df.assign(actions=df["info"].str.split(">")).explode("actions")\\ndf["actions"] = df["actions"].str.strip("-")\\ndf = df.drop("info", axis=1)\\ndf = df.reset_index(drop=True)\\",\n    \\"execution_count\\": 10\n  },\n  {\n    \\"id\\": \\"88dfcf1a59194eee87a4e73973860d81\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["action_time"] = df["actions"].str.split(n=1).str[1]\\ndf["action_time"] = df["action_time"].str.strip(" ")\\ndf["action_name"] = df["actions"].str.split().str.get(0)\\ndf = df.drop("actions", axis=1)\\",\n    \\"execution_count\\": 11\n  },\n  {\n    \\"id\\": \\"b60778b2e76c41ff833ac3eba5d4f3fb\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["action_time"] = pd.to_datetime(df["action_time"], format="(%d/%m/%y | %H:%M:%S)", errors="coerce")\\ndf = df.sort_values(["user_id", "action_time"])\\ndf.dropna(how="any", inplace=True)\\",\n    \\"execution_count\\": 12\n  },\n  {\n    \\"id\\": \\"8e1ffd0773a449f782251644bebc8423\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["session_num"] = (df["action_name"] == "END").groupby(df["user_id"]).cumsum()\\",\n    \\"execution_count\\": 13\n  },\n  {\n    \\"id\\": \\"f5be6d5f66b44c0a95275a673baf25a8\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df = df[df["action_name"] != "END"]\\ndf = df[df["action_name"] != "null"]\\ndf.dropna(how="any", inplace=True)\\ndf = df.reset_index(drop=True)\\",\n    \\"execution_count\\": 14\n  },\n  {\n    \\"id\\": \\"3de87383459c45a58c06553f82b3db73\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# The resulting dataset is as follows\\ndf\\",\n    \\"execution_count\\": 15\n  },\n  {\n    \\"id\\": \\"360fe33fecea4ba8885c20de94f9dfec\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"We derived the needed dataframe, containing "user_id", "action_time", "action_name" and "session_num" columns.\\"\n  },\n  {\n    \\"id\\": \\"609f0aa971fe40138df3653b7ebfbadb\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Metrics Evaluation\\"\n  },\n  {\n    \\"id\\": \\"3fade01224fc44c1becb71b70845d3bf\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Mean actions count per user overall\\"\n  },\n  {\n    \\"id\\": \\"b67be4bef5784d13aa6a8d71f26f5161\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Each user has different number of actions.\\npd.DataFrame(df.groupby("user_id")["action_time"].count()).sample(n=10)\\",\n    \\"execution_count\\": 16\n  },\n  {\n    \\"id\\": \\"65b70be78d934915954d5b4a215654b5\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df.groupby("user_id")["action_time"].count().mean()\\",\n    \\"execution_count\\": 17\n  },\n  {\n    \\"id\\": \\"3cab9777a8164e77ac4dcb79deca6a7f\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Average user made 13712.62 actions in the observed period.\\"\n  },\n  {\n    \\"id\\": \\"d738c61817b543a78846e1ce7af4c337\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Mean actions by user in a day\\"\n  },\n  {\n    \\"id\\": \\"a25cfe13105f4923863db55b52140ca1\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df.groupby(["user_id", df["action_time"].dt.date]).size().mean()\\",\n    \\"execution_count\\": 18\n  },\n  {\n    \\"id\\": \\"a88e56fd40f24c3f82b8848c535fb11b\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Average user made about 28.5 actions per day in the observed period.\\"\n  },\n  {\n    \\"id\\": \\"2afa80e6265b431f822dd32eb1ae4d5a\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Is there statistical difference of activity in different days of the week?\\"\n  },\n  {\n    \\"id\\": \\"9c99d3f9ba6749fb8be0bef703dbbe3b\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["date"] = df["action_time"].dt.date\\ndf["day_of_week"] = df["action_time"].dt.dayofweek\\",\n    \\"execution_count\\": 19\n  },\n  {\n    \\"id\\": \\"aba20255ae184a75a312e5482339a7ce\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"For testing statistical difference of activity in different days of the week we can use ANOVA test with H0 of no significant difference. We assume general things to use ANOVA ((1) interval data of the dependent variable, (2) normality, (3) homoscedasticity, and (4) no multicollinearity)\\n\\nFirst we calculate the number of occurances for each day of the week.\\"\n  },\n  {\n    \\"id\\": \\"c37a283d8e7644118689062b078fc0c9\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"data = pd.crosstab(df["day_of_week"], df.groupby(["day_of_week"])["date"].rank(method="dense").astype(int))\\ndata\\",\n    \\"execution_count\\": 20\n  },\n  {\n    \\"id\\": \\"2f33a22f8b254eda847ce904131c04b7\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"f_statistic, p_value = stats.f_oneway(data.iloc[0].to_list(),data.iloc[1].to_list(),data.iloc[2].to_list(),data.iloc[3].to_list(),data.iloc[4].to_list(),data.iloc[5].to_list(), data.iloc[6].to_list())\\n\\nprint(\\\\"p-value:\\\\", p_value)\\",\n    \\"execution_count\\": 21\n  },\n  {\n    \\"id\\": \\"423a38f62b5140ef80a752f009eab00e\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"In this case, the p-value is rather big, so we cannot reject the null hypothesis that there is no significant difference between the means of the groups. This means that there is insufficient evidence to support the claim that the groups are different from one another.\\"\n  },\n  {\n    \\"id\\": \\"473f659e68bb4269be6814f189c18b43\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"To illustrate the test, we can plot the distribution among the days of the week.\\"\n  },\n  {\n    \\"id\\": \\"c4b82ca470da4f468bac9b3108796b92\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"data.T.boxplot()\\",\n    \\"execution_count\\": 22\n  },\n  {\n    \\"id\\": \\"6c60b5d6c5eb41118e511c621d50b579\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## And between weekends and workdays? \\"\n  },\n  {\n    \\"id\\": \\"645d2bc56adf4a0f8283358803aa4f5a\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"We can use t-test, assuming homogeneity and normality. H0: the weekends and weekdays are statistically similar.\\"\n  },\n  {\n    \\"id\\": \\"6b8012f7a19445028ae96d4e4e3b3312\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"t_stat, p_val = stats.ttest_ind(data.iloc[0].to_list()+data.iloc[1].to_list()+data.iloc[2].to_list()+data.iloc[3].to_list()+data.iloc[4].to_list(),data.iloc[5].to_list()+data.iloc[6].to_list())\\nprint(\\\\"p-value:\\\\", p_val)\\",\n    \\"execution_count\\": 23\n  },\n  {\n    \\"id\\": \\"3e25c3a8043745ba8937b29e79e0da9f\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"The p-value is great, so we cannot reject the null hypothesis that there is no significant difference between weekends and weekdays. For visualisation refer the plot above.\\"\n  },\n  {\n    \\"id\\": \\"de2bebe4d2b54f799579b6791109ee1a\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Some additional metrics\\"\n  },\n  {\n    \\"id\\": \\"297338b79f7d4269874b9b88d933766d\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Some additional mertics may include analyzing the duration of the sessions.\\"\n  },\n  {\n    \\"id\\": \\"8ebc0e40f0664facb0605c934a7263e7\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"session_durations = df.groupby(["user_id", "session_num"])["action_time"].apply(lambda x: x.max() - x.min())\\n\\nmean_duration = session_durations.mean()\\nmedian_duration = session_durations.median()\\nmode_duration = session_durations.mode()[0]\\n\\nprint(f\\\\"Mean: {mean_duration}\\\\")\\nprint(f\\\\"Median: {median_duration}\\\\")\\",\n    \\"execution_count\\": 24\n  },\n  {\n    \\"id\\": \\"f02f2431366d4237825d3b22d0da8c48\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"The average duration of the session is about 14 hours, 7 minutes while the median is a bit more than 8 hours 55 minutes.\\"\n  },\n  {\n    \\"id\\": \\"473b03f0e37f482180c7c831387e5274\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Data Visualisation\\"\n  },\n  {\n    \\"id\\": \\"5031649110224d948fc5f9703473a91d\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## the time series of count of different actions by days\\"\n  },\n  {\n    \\"id\\": \\"c9136c3283874418907d41672f0c7857\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"sns.lineplot(data=df.groupby([pd.Grouper(key="action_time", freq="D"), "action_name"]).size().reset_index(name="count"), x="action_time", y="count", hue="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 25\n  },\n  {\n    \\"id\\": \\"ef9debc5529c43f587c77a86c76a53f3\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"The "by day" plot is kinda noisy so instead we can try to visualise weekly action numbers.\\"\n  },\n  {\n    \\"id\\": \\"7c87a03a51154decba7d2b405212d5b7\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"sns.lineplot(data=df.groupby([pd.Grouper(key="action_time", freq="W"), "action_name"]).size().reset_index(name="count"), x="action_time", y="count", hue="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 26\n  },\n  {\n    \\"id\\": \\"2994bc8c024d4299a73fa76259ebcb38\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## the barchart of different actions counts\\"\n  },\n  {\n    \\"id\\": \\"08aa6a8f32194c078651f070028f91e7\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"action_counts = df.groupby(\\\\"action_name\\\\")[\\\\"user_id\\\\"].count().reset_index(name=\\\\"count\\\\")\\n\\nsns.set(style=\\\\"whitegrid\\\\")\\nsns.barplot(x=\\\\"action_name\\\\", y=\\\\"count\\\\", data=action_counts)\\nplt.xticks(rotation=70)\\nplt.tight_layout()\\nplt.show()\\",\n    \\"execution_count\\": 31\n  },\n  {\n    \\"id\\": \\"62489459068d4de4b9ebf5a2b9f37b4b\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## the time series (line plot) of all actions of the top 20 percent of active users by days\\"\n  },\n  {\n    \\"id\\": \\"dc3debbd3ae848e6b88ab78e143330cc\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"user_daily_actions = df.groupby(["user_id", pd.Grouper(key="action_time", freq="D")])["action_name"].count().reset_index()\\nuser_total_actions = user_daily_actions.groupby("user_id")["action_name"].sum().reset_index()\\ntop_users = user_total_actions.nlargest(int(0.2*len(user_total_actions)), "action_name")["user_id"]\\",\n    \\"execution_count\\": 33\n  },\n  {\n    \\"id\\": \\"b9fdec42dfbc4ef5a1954c26599f6946\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df_top_users = df[df["user_id"].isin(top_users)]\\n\\ndf_top_users = df_top_users.set_index("action_time")\\ndaily_counts = df_top_users.resample("D").count()\\n\\nsns.lineplot(data=daily_counts, x=daily_counts.index, y="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 34\n  },\n  {\n    \\"id\\": \\"e3059687304d477f8af9eb5671d60817\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Again, noisy plot. We can redo it by week:\\"\n  },\n  {\n    \\"id\\": \\"f9c04f41030a477aa7ac43564bfa018a\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df_top_users = df[df["user_id"].isin(top_users)]\\n\\ndf_top_users = df_top_users.set_index("action_time")\\ndaily_counts = df_top_users.resample("W").count()\\n\\nsns.lineplot(data=daily_counts, x=daily_counts.index, y="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 35\n  },\n  {\n    \\"id\\": \\"c66e929906194e169be00a9c1b7f7609\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Some additional plots\\"\n  },\n  {\n    \\"id\\": \\"a00cccab70db4e4ca0e6270c1885bf9c\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Session duration plot with different colors for each user.\\"\n  },\n  {\n    \\"id\\": \\"23dcd099a85b46a984176e31e68507a2\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"session_durations = df.groupby(["user_id", "session_num"])["action_time"].agg(lambda x: x.max() - x.min())\\nfig, ax = plt.subplots()\\nfor user_id in session_durations.index.get_level_values(0).unique():\\n    durations = session_durations[user_id]\\n    ax.plot(durations.index, durations)\\nax.set_xlabel("Session Number")\\nax.set_ylabel("Session Duration")\\nplt.show()\\",\n    \\"execution_count\\": 30\n  }\n]\",\"session_id\":\"bc4839f5-1895-4803-91f4-f67d201a5904\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-06T17:32:23.389Z\",\"kernel_id\":\"fc5ae4ca-feb4-4cd8-a7e4-f191409970e1\",\"notebook_name\":\"task1.ipynb\",\"event\":\"save_notebook\",\"cell_source\":\"[\n  {\n    \\"id\\": \\"b28bc6e9d8ac4e24aa33b4bb856fb135\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Imports / installations\\"\n  },\n  {\n    \\"id\\": \\"f5093841b3154b9b8fff5a9da75e0691\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Do not forget to check if your notebook log collection plugin is working\\nfrom mining_extension import check_logging\\ncheck_logging(\\\\"http://3.249.245.244:9999\\\\")\\",\n    \\"execution_count\\": 1\n  },\n  {\n    \\"id\\": \\"ae7fd07a42ab4219847e4c58ad805e2c\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install pandas\\",\n    \\"execution_count\\": 2\n  },\n  {\n    \\"id\\": \\"cffc234fe199496487fb8c4329152b7b\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install numpy\\",\n    \\"execution_count\\": 3\n  },\n  {\n    \\"id\\": \\"ce071cb44f824ed08ad2c5afa39263fe\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install seaborn\\",\n    \\"execution_count\\": 4\n  },\n  {\n    \\"id\\": \\"611e1380aae3460c9e74a3cb9dc8a47b\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install scipy\\",\n    \\"execution_count\\": 5\n  },\n  {\n    \\"id\\": \\"07e75b1903db4218891f7a4283bb4461\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"import numpy as np\\nimport matplotlib.pyplot as plt\\nimport scipy.stats as stats\\nimport pandas as pd\\nimport seaborn as sns\\nimport zipfile\\",\n    \\"execution_count\\": 6\n  },\n  {\n    \\"id\\": \\"aa870403e8214032af4cf4bf24bb283a\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Data Engineering\\"\n  },\n  {\n    \\"id\\": \\"39b84d74fdfb4b3f9eddb5f120d01e43\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Reading the data from a text file and saving to Pandas DataFrame\\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip") as myzip:\\n    with myzip.open("jetnet_logs.txt") as myfile:\\n        df = pd.read_csv(myfile, delimiter="\\\\t", header=None)\\",\n    \\"execution_count\\": 7\n  },\n  {\n    \\"id\\": \\"b38a289a226f40328e70969a161c7280\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Looking at the raw data\\ndf.head()\\",\n    \\"execution_count\\": 8\n  },\n  {\n    \\"id\\": \\"9d232ef4568c47719180bebb614ddabb\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# For each instance separate the user and their list of actions\\ndf["user_id"] = df[0].str.split(":").str[0]\\ndf["info"] = df[0].str.split(": ").str[1]\\ndf["user_id"] = df["user_id"].str.replace("@", "")\\ndf = df.drop(0, axis=1)\\",\n    \\"execution_count\\": 9\n  },\n  {\n    \\"id\\": \\"16c1145214ac44de9b005b6b1a6bf737\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Making list of actions with corresponding user info\\ndf = df.assign(actions=df["info"].str.split(">")).explode("actions")\\ndf["actions"] = df["actions"].str.strip("-")\\ndf = df.drop("info", axis=1)\\ndf = df.reset_index(drop=True)\\",\n    \\"execution_count\\": 10\n  },\n  {\n    \\"id\\": \\"502459f36ad84b69837090ae841e8c4d\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["action_time"] = df["actions"].str.split(n=1).str[1]\\ndf["action_time"] = df["action_time"].str.strip(" ")\\ndf["action_name"] = df["actions"].str.split().str.get(0)\\ndf = df.drop("actions", axis=1)\\",\n    \\"execution_count\\": 11\n  },\n  {\n    \\"id\\": \\"f518d1a5930b4aebbe46e1bae6b47014\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["action_time"] = pd.to_datetime(df["action_time"], format="(%d/%m/%y | %H:%M:%S)", errors="coerce")\\ndf = df.sort_values(["user_id", "action_time"])\\ndf.dropna(how="any", inplace=True)\\",\n    \\"execution_count\\": 12\n  },\n  {\n    \\"id\\": \\"ffaaa7a30692418dbf65d1e15c9b9a25\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["session_num"] = (df["action_name"] == "END").groupby(df["user_id"]).cumsum()\\",\n    \\"execution_count\\": 13\n  },\n  {\n    \\"id\\": \\"1db98796a96f41f18561542636c8fd2e\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df = df[df["action_name"] != "END"]\\ndf = df[df["action_name"] != "null"]\\ndf.dropna(how="any", inplace=True)\\ndf = df.reset_index(drop=True)\\",\n    \\"execution_count\\": 14\n  },\n  {\n    \\"id\\": \\"d2a0810174964981a34774d62220fb89\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# The resulting dataset is as follows\\ndf\\",\n    \\"execution_count\\": 15\n  },\n  {\n    \\"id\\": \\"66227ea372ff4ffb8525eb5bf6b9c59c\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"We derived the needed dataframe, containing "user_id", "action_time", "action_name" and "session_num" columns.\\"\n  },\n  {\n    \\"id\\": \\"e581b94d4ecd44ee9e4e1514e3c701db\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Metrics Evaluation\\"\n  },\n  {\n    \\"id\\": \\"353a3f3927ed48ecae2b533ff2637369\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Mean actions count per user overall\\"\n  },\n  {\n    \\"id\\": \\"47a196218ebc43e1aecbd71247e396fb\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# Each user has different number of actions.\\npd.DataFrame(df.groupby("user_id")["action_time"].count()).sample(n=10)\\",\n    \\"execution_count\\": 16\n  },\n  {\n    \\"id\\": \\"509405670c2948d5a69dcdbd8ee6637b\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df.groupby("user_id")["action_time"].count().mean()\\",\n    \\"execution_count\\": 17\n  },\n  {\n    \\"id\\": \\"5fb542b33902424d9b1c7437b629fcb0\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Average user made 13712.62 actions in the observed period.\\"\n  },\n  {\n    \\"id\\": \\"ed15d8d39d3340b280a81f3f0fe156c4\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Mean actions by user in a day\\"\n  },\n  {\n    \\"id\\": \\"39c3669974b447219601b8f0c3d1ee3e\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df.groupby(["user_id", df["action_time"].dt.date]).size().mean()\\",\n    \\"execution_count\\": 18\n  },\n  {\n    \\"id\\": \\"9d82de2182b147f3bdc252ca289e1020\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Average user made about 28.5 actions per day in the observed period.\\"\n  },\n  {\n    \\"id\\": \\"28a34227885a41eca54a9fbe8f63aa98\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Is there statistical difference of activity in different days of the week?\\"\n  },\n  {\n    \\"id\\": \\"b2644fb395a745f595bda45f7253efc0\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df["date"] = df["action_time"].dt.date\\ndf["day_of_week"] = df["action_time"].dt.dayofweek\\",\n    \\"execution_count\\": 19\n  },\n  {\n    \\"id\\": \\"c060897647514c4ab44eab7cdada67b9\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"For testing statistical difference of activity in different days of the week we can use ANOVA test with H0 of no significant difference. We assume general things to use ANOVA ((1) interval data of the dependent variable, (2) normality, (3) homoscedasticity, and (4) no multicollinearity)\\n\\nFirst we calculate the number of occurances for each day of the week.\\"\n  },\n  {\n    \\"id\\": \\"6eed504d3f1545afb081a1ebfed69a1b\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"data = pd.crosstab(df["day_of_week"], df.groupby(["day_of_week"])["date"].rank(method="dense").astype(int))\\ndata\\",\n    \\"execution_count\\": 20\n  },\n  {\n    \\"id\\": \\"ee23bdff2bfe43d8a40a23edd10989ce\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"f_statistic, p_value = stats.f_oneway(data.iloc[0].to_list(),data.iloc[1].to_list(),data.iloc[2].to_list(),data.iloc[3].to_list(),data.iloc[4].to_list(),data.iloc[5].to_list(), data.iloc[6].to_list())\\n\\nprint(\\\\"p-value:\\\\", p_value)\\",\n    \\"execution_count\\": 21\n  },\n  {\n    \\"id\\": \\"21503ec11932485ba3884c670fdc0291\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"In this case, the p-value is rather big, so we cannot reject the null hypothesis that there is no significant difference between the means of the groups. This means that there is insufficient evidence to support the claim that the groups are different from one another.\\"\n  },\n  {\n    \\"id\\": \\"ffe1363f5f994c2580d06737c91adc12\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"To illustrate the test, we can plot the distribution among the days of the week.\\"\n  },\n  {\n    \\"id\\": \\"754328b493ca4dcc9a6754e88d3ab602\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"data.T.boxplot()\\",\n    \\"execution_count\\": 22\n  },\n  {\n    \\"id\\": \\"dce753bf198d46348c80836edc63b0ee\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## And between weekends and workdays? \\"\n  },\n  {\n    \\"id\\": \\"c8820e04a6474eeb929ad92a5520ba75\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"We can use t-test, assuming homogeneity and normality. H0: the weekends and weekdays are statistically similar.\\"\n  },\n  {\n    \\"id\\": \\"1b26359e14ad47be9d7a65c7d07b66b6\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"t_stat, p_val = stats.ttest_ind(data.iloc[0].to_list()+data.iloc[1].to_list()+data.iloc[2].to_list()+data.iloc[3].to_list()+data.iloc[4].to_list(),data.iloc[5].to_list()+data.iloc[6].to_list())\\nprint(\\\\"p-value:\\\\", p_val)\\",\n    \\"execution_count\\": 23\n  },\n  {\n    \\"id\\": \\"faae2f6b26b341208ccf36b6be225176\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"The p-value is great, so we cannot reject the null hypothesis that there is no significant difference between weekends and weekdays. For visualisation refer the plot above.\\"\n  },\n  {\n    \\"id\\": \\"86ac045d5f124c9183a56c7450743f37\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Some additional metrics\\"\n  },\n  {\n    \\"id\\": \\"1763482313b449b7a4f406c77e1a0b55\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Some additional mertics may include analyzing the duration of the sessions.\\"\n  },\n  {\n    \\"id\\": \\"64f33f71e2f4400882bf343bd0e2cfe6\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"session_durations = df.groupby(["user_id", "session_num"])["action_time"].apply(lambda x: x.max() - x.min())\\n\\nmean_duration = session_durations.mean()\\nmedian_duration = session_durations.median()\\nmode_duration = session_durations.mode()[0]\\n\\nprint(f\\\\"Mean: {mean_duration}\\\\")\\nprint(f\\\\"Median: {median_duration}\\\\")\\",\n    \\"execution_count\\": 24\n  },\n  {\n    \\"id\\": \\"c630e52a073e44c68a546ef6928728a1\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"The average duration of the session is about 14 hours, 7 minutes while the median is a bit more than 8 hours 55 minutes.\\"\n  },\n  {\n    \\"id\\": \\"f0667965909d4e658c1b88c2e8b3853e\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Data Visualisation\\"\n  },\n  {\n    \\"id\\": \\"9688eaad9b8e4e6294c68aeeabb0a7b0\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## the time series of count of different actions by days\\"\n  },\n  {\n    \\"id\\": \\"1b57c01c9ddd43ca9fcd4d4265f74095\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"sns.lineplot(data=df.groupby([pd.Grouper(key="action_time", freq="D"), "action_name"]).size().reset_index(name="count"), x="action_time", y="count", hue="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 25\n  },\n  {\n    \\"id\\": \\"788b325b9adc46d788437d351e546ff4\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"The "by day" plot is kinda noisy so instead we can try to visualise weekly action numbers.\\"\n  },\n  {\n    \\"id\\": \\"037b91d4f3084187b1b0f0fd9f9706a6\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"sns.lineplot(data=df.groupby([pd.Grouper(key="action_time", freq="W"), "action_name"]).size().reset_index(name="count"), x="action_time", y="count", hue="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 26\n  },\n  {\n    \\"id\\": \\"8481c531b97e454380c0d7d913fb2f35\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## the barchart of different actions counts\\"\n  },\n  {\n    \\"id\\": \\"7ff6d5ac173641128cf15d56492aaaaa\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"action_counts = df.groupby(\\\\"action_name\\\\")[\\\\"user_id\\\\"].count().reset_index(name=\\\\"count\\\\")\\n\\nsns.set(style=\\\\"whitegrid\\\\")\\nsns.barplot(x=\\\\"action_name\\\\", y=\\\\"count\\\\", data=action_counts)\\nplt.xticks(rotation=70)\\nplt.tight_layout()\\nplt.show()\\",\n    \\"execution_count\\": 31\n  },\n  {\n    \\"id\\": \\"fc5d46a85cdf4b1f9c8eb2d2529b4fe9\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## the time series (line plot) of all actions of the top 20 percent of active users by days\\"\n  },\n  {\n    \\"id\\": \\"c9951ed943e64b1388c52a789b699dd2\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"user_daily_actions = df.groupby(["user_id", pd.Grouper(key="action_time", freq="D")])["action_name"].count().reset_index()\\nuser_total_actions = user_daily_actions.groupby("user_id")["action_name"].sum().reset_index()\\ntop_users = user_total_actions.nlargest(int(0.2*len(user_total_actions)), "action_name")["user_id"]\\",\n    \\"execution_count\\": 33\n  },\n  {\n    \\"id\\": \\"e09da2074cc4422ca3c727d89cd98307\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df_top_users = df[df["user_id"].isin(top_users)]\\n\\ndf_top_users = df_top_users.set_index("action_time")\\ndaily_counts = df_top_users.resample("D").count()\\n\\nsns.lineplot(data=daily_counts, x=daily_counts.index, y="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 34\n  },\n  {\n    \\"id\\": \\"18d2f9e54a7d46dca7030fe1ac2a08cd\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Again, noisy plot. We can redo it by week:\\"\n  },\n  {\n    \\"id\\": \\"f7bfd40292634124b0b8eab537f0adcc\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"df_top_users = df[df["user_id"].isin(top_users)]\\n\\ndf_top_users = df_top_users.set_index("action_time")\\ndaily_counts = df_top_users.resample("W").count()\\n\\nsns.lineplot(data=daily_counts, x=daily_counts.index, y="action_name", linewidth=0.5, legend=False)\\n\\nplt.show()\\",\n    \\"execution_count\\": 35\n  },\n  {\n    \\"id\\": \\"9a92f6522b0a4f939b078db31e477a7d\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"## Some additional plots\\"\n  },\n  {\n    \\"id\\": \\"b9ec31a2ff5a42228593c2f4c9f8322b\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Session duration plot with different colors for each user.\\"\n  },\n  {\n    \\"id\\": \\"216a19981e14496b92107091133b5757\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"session_durations = df.groupby(["user_id", "session_num"])["action_time"].agg(lambda x: x.max() - x.min())\\nfig, ax = plt.subplots()\\nfor user_id in session_durations.index.get_level_values(0).unique():\\n    durations = session_durations[user_id]\\n    ax.plot(durations.index, durations)\\nax.set_xlabel("Session Number")\\nax.set_ylabel("Session Duration")\\nplt.show()\\",\n    \\"execution_count\\": 30\n  }\n]\",\"session_id\":\"bc4839f5-1895-4803-91f4-f67d201a5904\"}"[EVENT_SEPARATOR]
